networks:
  microservice_network:
    driver: bridge


services:

  user_mysql:
    image: mariadb:10.5.8
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    volumes:
      - ./docker/mysql:/var/lib/mysql
    env_file:
      - .env
    environment:
      - MYSQL_HOST=${DB_HOST}
      - MYSQL_PORT=${DB_PORT}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
    networks:
      - microservice_network

  phpmyadmin:
    depends_on:
      - user_mysql
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - '8086:80'
    env_file:
      - .env
    environment:
      - PMA_HOST=${DB_HOST}
      - PHP_ENABLE_XDEBUG=0
      - UPLOAD_LIMIT=300M
    networks:
      - microservice_network

  redis:
    image: redis:alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - microservice_network

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    ports:
        - 5672:5672
        - 15672:15672
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
        - ./docker/rabbitmq/data/:/var/lib/rabbitmq/
        - ./docker/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - microservice_network

  gateway:
    build:
      context: .
      dockerfile: /apps/gateway/Dockerfile.dev
      target: development
    command: npm run start:dev gateway
    env_file:
      - .env
    depends_on:
      - user_mysql
      - redis
      - rabbitmq
      - users
      - notifications
    develop:
      watch:
        - action: sync
          path: ./apps/gateway
          target: /usr/src/app/apps/gateway
          ignore:
            - node_modules/
        - action: sync
          path: ./libs
          target: /usr/src/app/libs
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
        - action: rebuild
          path: .env
    volumes:
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
    networks:
      - microservice_network
  
  users:
    build:
      context: .
      dockerfile: /apps/users/Dockerfile.dev
      target: development
    command: npm run start:dev users
    env_file:
      - .env
    depends_on:
      - user_mysql
      - redis
      - rabbitmq
      - notifications
    develop:
      watch:
        - action: sync
          path: ./apps/users
          target: /usr/src/app/apps/users
          ignore:
            - node_modules/
        - action: sync
          path: ./libs
          target: /usr/src/app/libs
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
        - action: rebuild
          path: .env
    volumes:
      - /usr/src/app/node_modules
    ports:
      - '3001:3001'
    networks:
      - microservice_network
  
  notifications:
    build:
      context: .
      dockerfile: /apps/notifications/Dockerfile.dev
      target: development
    command: npm run start:dev notifications
    env_file:
      - .env
    depends_on:
      - user_mysql
      - redis
      - rabbitmq
    develop:
      watch:
        - action: sync
          path: ./apps/notifications
          target: /usr/src/app/apps/notifications
          ignore:
            - node_modules/
        - action: sync
          path: ./libs
          target: /usr/src/app/libs
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
        - action: rebuild
          path: .env
    volumes:
      - /usr/src/app/node_modules
    ports:
      - '3002:3002'
    networks:
      - microservice_network